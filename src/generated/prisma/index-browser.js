/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require("./runtime/index-browser.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb",
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
  id: "id",
  firstName_encrypted: "firstName_encrypted",
  firstName_hash: "firstName_hash",
  lastName_encrypted: "lastName_encrypted",
  lastName_hash: "lastName_hash",
  email_encrypted: "email_encrypted",
  email_hash: "email_hash",
  phone_encrypted: "phone_encrypted",
  phone_hash: "phone_hash",
  userType: "userType",
  role: "role",
  communicationPreference: "communicationPreference",
  isActive: "isActive",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  emailVerificationExpires: "emailVerificationExpires",
  emailVerificationToken: "emailVerificationToken",
  emailVerified: "emailVerified",
  lastLoginAt: "lastLoginAt",
  passwordHash: "passwordHash",
  passwordResetExpires: "passwordResetExpires",
  passwordResetToken: "passwordResetToken",
  phoneVerificationCode_encrypted: "phoneVerificationCode_encrypted",
  phoneVerificationCode_hash: "phoneVerificationCode_hash",
  phoneVerificationExpires: "phoneVerificationExpires",
  phoneVerified: "phoneVerified",
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: "id",
  name: "name",
  description: "description",
  isActive: "isActive",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  adminId: "adminId",
  allowFollows: "allowFollows",
  code: "code",
  requireApproval: "requireApproval",
};

exports.Prisma.SubgroupScalarFieldEnum = {
  id: "id",
  organizationId: "organizationId",
  name: "name",
  description: "description",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  isActive: "isActive",
};

exports.Prisma.UserSubgroupScalarFieldEnum = {
  id: "id",
  userId: "userId",
  subgroupId: "subgroupId",
  createdAt: "createdAt",
};

exports.Prisma.StudentInfoScalarFieldEnum = {
  id: "id",
  userId: "userId",
  studentId_encrypted: "studentId_encrypted",
  studentId_hash: "studentId_hash",
  major_encrypted: "major_encrypted",
  major_hash: "major_hash",
  gpa: "gpa",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  classification: "classification",
  enrollmentStatus: "enrollmentStatus",
  expectedGraduationTerm: "expectedGraduationTerm",
  expectedGraduationYear: "expectedGraduationYear",
  isActive: "isActive",
  minor_encrypted: "minor_encrypted",
  minor_hash: "minor_hash",
  secondMajor_encrypted: "secondMajor_encrypted",
  secondMajor_hash: "secondMajor_hash",
};

exports.Prisma.AlumniInfoScalarFieldEnum = {
  id: "id",
  userId: "userId",
  graduationYear: "graduationYear",
  currentEmployer_encrypted: "currentEmployer_encrypted",
  currentEmployer_hash: "currentEmployer_hash",
  jobTitle_encrypted: "jobTitle_encrypted",
  jobTitle_hash: "jobTitle_hash",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  finalGpa: "finalGpa",
  graduationTerm: "graduationTerm",
  industry: "industry",
  isEmployed: "isEmployed",
  major_encrypted: "major_encrypted",
  major_hash: "major_hash",
  minor_encrypted: "minor_encrypted",
  minor_hash: "minor_hash",
  secondMajor_encrypted: "secondMajor_encrypted",
  secondMajor_hash: "secondMajor_hash",
  studentId_encrypted: "studentId_encrypted",
  studentId_hash: "studentId_hash",
  yearsOfExperience: "yearsOfExperience",
};

exports.Prisma.IndustryProfessionalInfoScalarFieldEnum = {
  id: "id",
  userId: "userId",
  jobTitle_encrypted: "jobTitle_encrypted",
  jobTitle_hash: "jobTitle_hash",
  yearsOfExperience: "yearsOfExperience",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  availableForSpeaking: "availableForSpeaking",
  currentEmployer_encrypted: "currentEmployer_encrypted",
  currentEmployer_hash: "currentEmployer_hash",
  industry: "industry",
  isCurrentlyEmployed: "isCurrentlyEmployed",
  linkedinUrl_encrypted: "linkedinUrl_encrypted",
  linkedinUrl_hash: "linkedinUrl_hash",
  seniorityLevel: "seniorityLevel",
  willingToMentor: "willingToMentor",
};

exports.Prisma.OrgFollowScalarFieldEnum = {
  id: "id",
  userId: "userId",
  organizationId: "organizationId",
  status: "status",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  approvedAt: "approvedAt",
  approvedByAdminId: "approvedByAdminId",
  joinMethod: "joinMethod",
  rejectedAt: "rejectedAt",
  rejectionReason: "rejectionReason",
};

exports.Prisma.OrgCreditScalarFieldEnum = {
  id: "id",
  organizationId: "organizationId",
  totalUsed: "totalUsed",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  balance: "balance",
  lastUsedAt: "lastUsedAt",
  lowCreditAlertSent: "lowCreditAlertSent",
  totalEarned: "totalEarned",
};

exports.Prisma.CreditTransactionScalarFieldEnum = {
  id: "id",
  createdAt: "createdAt",
  organizationId: "organizationId",
  type: "type",
  amount: "amount",
  balanceBefore: "balanceBefore",
  balanceAfter: "balanceAfter",
  description: "description",
  messageId: "messageId",
  adminId: "adminId",
  externalRef: "externalRef",
};

exports.Prisma.MessageScalarFieldEnum = {
  id: "id",
  organizationId: "organizationId",
  subgroupId: "subgroupId",
  subject: "subject",
  content: "content",
  type: "type",
  sentAt: "sentAt",
  createdAt: "createdAt",
  creditsCalculated: "creditsCalculated",
  creditsUsed: "creditsUsed",
  failureReason: "failureReason",
  recipientCount: "recipientCount",
  sentByAdminId: "sentByAdminId",
  status: "status",
  updatedAt: "updatedAt",
};

exports.Prisma.MessageDeliveryScalarFieldEnum = {
  id: "id",
  messageId: "messageId",
  status: "status",
  deliveredAt: "deliveredAt",
  createdAt: "createdAt",
  externalMessageId: "externalMessageId",
  failedAt: "failedAt",
  failureReason: "failureReason",
  providerResponse: "providerResponse",
  recipientEmail_encrypted: "recipientEmail_encrypted",
  recipientEmail_hash: "recipientEmail_hash",
  recipientPhone_encrypted: "recipientPhone_encrypted",
  recipientPhone_hash: "recipientPhone_hash",
  recipientUserId: "recipientUserId",
  retryCount: "retryCount",
  updatedAt: "updatedAt",
};

exports.Prisma.SmsOptOutScalarFieldEnum = {
  id: "id",
  organizationId: "organizationId",
  createdAt: "createdAt",
  ipAddress: "ipAddress",
  optInAt: "optInAt",
  optInMethod: "optInMethod",
  optOutMessage: "optOutMessage",
  optOutMethod: "optOutMethod",
  phone_encrypted: "phone_encrypted",
  phone_hash: "phone_hash",
  updatedAt: "updatedAt",
  userAgent: "userAgent",
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: "id",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  key: "key",
  value: "value",
  description: "description",
  category: "category",
  isPublic: "isPublic",
  lastModifiedBy: "lastModifiedBy",
};

exports.Prisma.AccountScalarFieldEnum = {
  id: "id",
  userId: "userId",
  type: "type",
  provider: "provider",
  providerAccountId: "providerAccountId",
  refresh_token: "refresh_token",
  access_token: "access_token",
  expires_at: "expires_at",
  token_type: "token_type",
  scope: "scope",
  id_token: "id_token",
  session_state: "session_state",
};

exports.Prisma.SessionScalarFieldEnum = {
  id: "id",
  sessionToken: "sessionToken",
  userId: "userId",
  expires: "expires",
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: "identifier",
  token: "token",
  expires: "expires",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.UserType = exports.$Enums.UserType = {
  STUDENT: "STUDENT",
  ALUMNI: "ALUMNI",
  INDUSTRY_PROFESSIONAL: "INDUSTRY_PROFESSIONAL",
};

exports.UserRole = exports.$Enums.UserRole = {
  CLIENT: "CLIENT",
  ADMIN: "ADMIN",
  SUPER_ADMIN: "SUPER_ADMIN",
};

exports.CommunicationPreference = exports.$Enums.CommunicationPreference = {
  EMAIL_ONLY: "EMAIL_ONLY",
  SMS_ONLY: "SMS_ONLY",
  BOTH: "BOTH",
};

exports.StudentClassification = exports.$Enums.StudentClassification = {
  FRESHMAN: "FRESHMAN",
  SOPHOMORE: "SOPHOMORE",
  JUNIOR: "JUNIOR",
  SENIOR: "SENIOR",
  GRADUATE_STUDENT: "GRADUATE_STUDENT",
};

exports.GraduationTerm = exports.$Enums.GraduationTerm = {
  FALL: "FALL",
  SPRING: "SPRING",
  SUMMER: "SUMMER",
};

exports.Industry = exports.$Enums.Industry = {
  TECHNOLOGY: "TECHNOLOGY",
  FINANCE: "FINANCE",
  HEALTHCARE: "HEALTHCARE",
  EDUCATION: "EDUCATION",
  MANUFACTURING: "MANUFACTURING",
  RETAIL: "RETAIL",
  CONSULTING: "CONSULTING",
  GOVERNMENT: "GOVERNMENT",
  NON_PROFIT: "NON_PROFIT",
  ENERGY: "ENERGY",
  MEDIA: "MEDIA",
  REAL_ESTATE: "REAL_ESTATE",
  AGRICULTURE: "AGRICULTURE",
  CONSTRUCTION: "CONSTRUCTION",
  TRANSPORTATION: "TRANSPORTATION",
  OTHER: "OTHER",
};

exports.FollowStatus = exports.$Enums.FollowStatus = {
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
};

exports.TransactionType = exports.$Enums.TransactionType = {
  INITIAL: "INITIAL",
  PURCHASE: "PURCHASE",
  USAGE: "USAGE",
  ADJUSTMENT: "ADJUSTMENT",
  REFUND: "REFUND",
};

exports.MessageType = exports.$Enums.MessageType = {
  EMAIL: "EMAIL",
  SMS: "SMS",
};

exports.DeliveryStatus = exports.$Enums.DeliveryStatus = {
  SENT: "SENT",
  DELIVERED: "DELIVERED",
  FAILED: "FAILED",
  BOUNCED: "BOUNCED",
  PENDING: "PENDING",
};

exports.Prisma.ModelName = {
  User: "User",
  Organization: "Organization",
  Subgroup: "Subgroup",
  UserSubgroup: "UserSubgroup",
  StudentInfo: "StudentInfo",
  AlumniInfo: "AlumniInfo",
  IndustryProfessionalInfo: "IndustryProfessionalInfo",
  OrgFollow: "OrgFollow",
  OrgCredit: "OrgCredit",
  CreditTransaction: "CreditTransaction",
  Message: "Message",
  MessageDelivery: "MessageDelivery",
  SmsOptOut: "SmsOptOut",
  SystemConfig: "SystemConfig",
  Account: "Account",
  Session: "Session",
  VerificationToken: "VerificationToken",
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            "PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `" +
            runtime.prettyName +
            "`).";
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
