generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                    @id @default(cuid())
  firstName_encrypted             String
  firstName_hash                  String
  lastName_encrypted              String
  lastName_hash                   String
  email_encrypted                 String
  email_hash                      String                    @unique
  phone_encrypted                 String?
  phone_hash                      String?
  userType                        UserType?
  role                            UserRole                  @default(CLIENT)
  communicationPreference         CommunicationPreference   @default(EMAIL_ONLY)
  isActive                        Boolean                   @default(true)
  createdAt                       DateTime                  @default(now())
  updatedAt                       DateTime                  @updatedAt
  emailVerificationExpires        DateTime?
  emailVerificationToken          String?
  emailVerified                   Boolean                   @default(false)
  lastLoginAt                     DateTime?
  passwordHash                    String?
  passwordResetExpires            DateTime?
  passwordResetToken              String?
  phoneVerificationCode_encrypted String?
  phoneVerificationCode_hash      String?
  phoneVerificationExpires        DateTime?
  phoneVerified                   Boolean                   @default(false)
  alumniInfo                      AlumniInfo?
  industryProfessionalInfo        IndustryProfessionalInfo?
  followRequests                  OrgFollow[]
  studentInfo                     StudentInfo?
  userSubgroups                   UserSubgroup[]
  accounts                        Account[]
  sessions                        Session[]

  @@map("users")
}

model Organization {
  id              String      @id @default(cuid())
  name            String      @db.VarChar(100)
  description     String?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  adminId         String
  allowFollows    Boolean     @default(true)
  code            String      @unique @db.VarChar(8)
  requireApproval Boolean     @default(true)
  messages        Message[]
  credits         OrgCredit?
  followers       OrgFollow[]
  subgroups       Subgroup[]

  @@map("organizations")
}

model Subgroup {
  id             String         @id @default(cuid())
  organizationId String
  name           String         @db.VarChar(100)
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isActive       Boolean        @default(true)
  messages       Message[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userSubgroups  UserSubgroup[]

  @@map("subgroups")
}

model UserSubgroup {
  id         String   @id @default(cuid())
  userId     String
  subgroupId String
  createdAt  DateTime @default(now())
  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subgroupId])
  @@map("user_subgroups")
}

model StudentInfo {
  id                     String                @id @default(cuid())
  userId                 String                @unique
  studentId_encrypted    String
  studentId_hash         String                @unique
  major_encrypted        String
  major_hash             String
  gpa                    Float?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  classification         StudentClassification
  enrollmentStatus       String?
  expectedGraduationTerm GraduationTerm
  expectedGraduationYear Int
  isActive               Boolean               @default(true)
  minor_encrypted        String?
  minor_hash             String?
  secondMajor_encrypted  String?
  secondMajor_hash       String?
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_info")
}

model AlumniInfo {
  id                        String         @id @default(cuid())
  userId                    String         @unique
  graduationYear            Int
  currentEmployer_encrypted String?
  currentEmployer_hash      String?
  jobTitle_encrypted        String?
  jobTitle_hash             String?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  finalGpa                  Float?
  graduationTerm            GraduationTerm
  industry                  Industry?
  isEmployed                Boolean        @default(false)
  major_encrypted           String
  major_hash                String
  minor_encrypted           String?
  minor_hash                String?
  secondMajor_encrypted     String?
  secondMajor_hash          String?
  studentId_encrypted       String
  studentId_hash            String         @unique
  yearsOfExperience         Int?
  user                      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alumni_info")
}

model IndustryProfessionalInfo {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  jobTitle_encrypted        String
  jobTitle_hash             String
  yearsOfExperience         Int
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  availableForSpeaking      Boolean  @default(false)
  currentEmployer_encrypted String
  currentEmployer_hash      String
  industry                  Industry
  isCurrentlyEmployed       Boolean  @default(true)
  linkedinUrl_encrypted     String?
  linkedinUrl_hash          String?
  seniorityLevel            String?
  willingToMentor           Boolean  @default(false)
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("industry_professional_info")
}

model OrgFollow {
  id                String       @id @default(cuid())
  userId            String
  organizationId    String
  status            FollowStatus @default(PENDING)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  approvedAt        DateTime?
  approvedByAdminId String?
  joinMethod        String?
  rejectedAt        DateTime?
  rejectionReason   String?
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("org_follows")
}

model OrgCredit {
  id                 String       @id @default(cuid())
  organizationId     String       @unique
  totalUsed          Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  balance            Int          @default(100)
  lastUsedAt         DateTime?
  lowCreditAlertSent Boolean      @default(false)
  totalEarned        Int          @default(100)
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("org_credits")
}

model CreditTransaction {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  organizationId String
  type           TransactionType
  amount         Int
  balanceBefore  Int
  balanceAfter   Int
  description    String?
  messageId      String?
  adminId        String?
  externalRef    String?

  @@map("credit_transactions")
}

model Message {
  id                String            @id @default(cuid())
  organizationId    String
  subgroupId        String?
  subject           String?           @db.VarChar(200)
  content           String
  type              MessageType
  sentAt            DateTime?
  createdAt         DateTime          @default(now())
  creditsCalculated Int?
  creditsUsed       Int?
  failureReason     String?
  recipientCount    Int
  sentByAdminId     String
  status            String            @default("DRAFT")
  updatedAt         DateTime          @updatedAt
  deliveries        MessageDelivery[]
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subgroup          Subgroup?         @relation(fields: [subgroupId], references: [id])

  @@map("messages")
}

model MessageDelivery {
  id                       String         @id @default(cuid())
  messageId                String
  status                   DeliveryStatus @default(PENDING)
  deliveredAt              DateTime?
  createdAt                DateTime       @default(now())
  externalMessageId        String?
  failedAt                 DateTime?
  failureReason            String?
  providerResponse         Json?
  recipientEmail_encrypted String?
  recipientEmail_hash      String?
  recipientPhone_encrypted String?
  recipientPhone_hash      String?
  recipientUserId          String
  retryCount               Int            @default(0)
  updatedAt                DateTime       @updatedAt
  message                  Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_deliveries")
}

model SmsOptOut {
  id              String    @id @default(cuid())
  organizationId  String?
  createdAt       DateTime  @default(now())
  ipAddress       String?
  optInAt         DateTime?
  optInMethod     String?
  optOutMessage   String?
  optOutMethod    String
  phone_encrypted String
  phone_hash      String    @unique
  updatedAt       DateTime  @updatedAt
  userAgent       String?

  @@map("sms_opt_outs")
}

model SystemConfig {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  key            String   @unique @db.VarChar(100)
  value          String
  description    String?
  category       String   @default("GENERAL")
  isPublic       Boolean  @default(false)
  lastModifiedBy String?

  @@map("system_config")
}

enum CommunicationPreference {
  EMAIL_ONLY
  SMS_ONLY
  BOTH
}

enum UserRole {
  CLIENT
  ADMIN
  SUPER_ADMIN
}

enum FollowStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  EMAIL
  SMS
}

enum DeliveryStatus {
  SENT
  DELIVERED
  FAILED
  BOUNCED
  PENDING
}

enum TransactionType {
  INITIAL
  PURCHASE
  USAGE
  ADJUSTMENT
  REFUND
}

enum UserType {
  STUDENT
  ALUMNI
  INDUSTRY_PROFESSIONAL
}

enum StudentClassification {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
  GRADUATE_STUDENT
}

enum GraduationTerm {
  FALL
  SPRING
  SUMMER
}

enum Industry {
  TECHNOLOGY
  FINANCE
  HEALTHCARE
  EDUCATION
  MANUFACTURING
  RETAIL
  CONSULTING
  GOVERNMENT
  NON_PROFIT
  ENERGY
  MEDIA
  REAL_ESTATE
  AGRICULTURE
  CONSTRUCTION
  TRANSPORTATION
  OTHER
}

// NextAuth.js adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
